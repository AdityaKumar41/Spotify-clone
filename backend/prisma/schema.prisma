// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  email             String        @unique
  password          String?       // For non-OAuth users
  profileImage      String?
  firstName         String?
  lastName          String?
  providerId        String?
  isVerified        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  lastLogin         DateTime?
  
  // Changed field names to match resolver
  playlists         Playlist[]
  savedTracks       Song[]        @relation("UserSavedTracks")    // Changed from likedSongs
  savedAlbums       Album[]       @relation("UserSavedAlbums")    // Changed from likedAlbums
  following         User[]        @relation("UserFollows")        // Changed from followedUsers
  followers         User[]        @relation("UserFollows")        // Changed from followedBy
  
  // Keep these additional relations
  followedArtists   Artist[]      @relation("UserFollowedArtists")
  artist            Artist?       // Changed: One user can have one artist profile
  country          String?
  dateOfBirth      DateTime?
}

model Song {
  id              Int           @id @default(autoincrement())
  title           String
  duration        Int           // Duration in seconds
  releaseDate     DateTime
  fileUrl         String
  coverImage      String?
  lyrics          String?
  isExplicit      Boolean       @default(false)
  playCount       Int           @default(0)
  artist          Artist        @relation(fields: [artistId], references: [id])
  artistId        Int
  album           Album?        @relation(fields: [albumId], references: [id])
  albumId         Int?
  genres          Genre[]
  playlists       Playlist[]    @relation("PlaylistToSong")
  savedByUsers    User[]        @relation("UserSavedTracks")     // Changed relation name
}

model Artist {
  id              Int           @id @default(autoincrement())
  name            String
  bio             String?
  image           String?
  headerImage     String?       // Banner image for artist page
  verified        Boolean       @default(false)
  monthlyListeners Int          @default(0)
  type            String?       // SOLO, BAND, etc.
  facebook        String?
  twitter         String?
  instagram       String?
  website         String?
  songs           Song[]
  albums          Album[]
  user            User?         @relation(fields: [userId], references: [id])
  userId          Int?         @unique  // Changed: Added unique constraint
  followers       User[]        @relation("UserFollowedArtists")
  genres          Genre[]
}

model Album {
  id              Int           @id @default(autoincrement())
  title           String
  releaseDate     DateTime
  coverImage      String?
  type            String        // SINGLE, EP, ALBUM
  artist          Artist        @relation(fields: [artistId], references: [id])
  artistId        Int
  songs           Song[]
  savedByUsers    User[]        @relation("UserSavedAlbums")     // Changed relation name
  genres          Genre[]
}

model Playlist {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  coverImage      String?
  isPublic        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  songs           Song[]        @relation("PlaylistToSong")
  followers       Int           @default(0)
}

model Genre {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  songs           Song[]
  artists         Artist[]
  albums          Album[]
}



